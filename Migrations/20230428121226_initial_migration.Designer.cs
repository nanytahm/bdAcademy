// <auto-generated />
using System;
using AcademyApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AcademyApi.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230428121226_initial_migration")]
    partial class initial_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcademyApi.Models.tAlternatives", b =>
                {
                    b.Property<long>("IdAlternative")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdAlternative"));

                    b.Property<string>("Alternative")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IdQuestion")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsTheAnswer")
                        .HasColumnType("bit");

                    b.HasKey("IdAlternative");

                    b.HasIndex("IdQuestion");

                    b.ToTable("Alternatives");
                });

            modelBuilder.Entity("AcademyApi.Models.tAnswerStudent", b =>
                {
                    b.Property<long>("IdAnswerStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdAnswerStudent"));

                    b.Property<string>("AnswerStudent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAnswerStudent");

                    b.ToTable("AnswerStudents");
                });

            modelBuilder.Entity("AcademyApi.Models.tCareer", b =>
                {
                    b.Property<long>("IdCareer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdCareer"));

                    b.Property<long>("IdProfesionalSchool")
                        .HasColumnType("bigint");

                    b.Property<string>("NameCareer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCareer");

                    b.HasIndex("IdProfesionalSchool");

                    b.ToTable("Careers");
                });

            modelBuilder.Entity("AcademyApi.Models.tCourse", b =>
                {
                    b.Property<long>("IdCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdCourse"));

                    b.Property<long>("IdTeacher")
                        .HasColumnType("bigint");

                    b.Property<string>("NameCourse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("tCareerIdCareer")
                        .HasColumnType("bigint");

                    b.HasKey("IdCourse");

                    b.HasIndex("IdTeacher");

                    b.HasIndex("tCareerIdCareer");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("AcademyApi.Models.tExamn", b =>
                {
                    b.Property<long>("IdExam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdExam"));

                    b.Property<long>("IdCourse")
                        .HasColumnType("bigint");

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NroPreguntas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdExam");

                    b.HasIndex("IdCourse");

                    b.ToTable("Examns");
                });

            modelBuilder.Entity("AcademyApi.Models.tProfesionalSchool", b =>
                {
                    b.Property<long>("IdProfesionalSchool")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdProfesionalSchool"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdProfesionalSchool");

                    b.ToTable("ProfesionalSchools");
                });

            modelBuilder.Entity("AcademyApi.Models.tQuestions", b =>
                {
                    b.Property<long>("IdQuestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdQuestion"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IdExam")
                        .HasColumnType("bigint");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tema")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdQuestion");

                    b.HasIndex("IdExam");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("AcademyApi.Models.tStudent", b =>
                {
                    b.Property<long>("IdStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdStudent"));

                    b.Property<long>("IdCourse")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdStudent");

                    b.HasIndex("IdCourse");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("AcademyApi.Models.tTeacher", b =>
                {
                    b.Property<long>("IdTeacher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdTeacher"));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTeacher");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("tAnswerStudenttQuestions", b =>
                {
                    b.Property<long>("AnswerStudentsIdAnswerStudent")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionsIdQuestion")
                        .HasColumnType("bigint");

                    b.HasKey("AnswerStudentsIdAnswerStudent", "QuestionsIdQuestion");

                    b.HasIndex("QuestionsIdQuestion");

                    b.ToTable("tAnswerStudenttQuestions");
                });

            modelBuilder.Entity("AcademyApi.Models.tAlternatives", b =>
                {
                    b.HasOne("AcademyApi.Models.tQuestions", "Questions")
                        .WithMany("Alternatives")
                        .HasForeignKey("IdQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("AcademyApi.Models.tCareer", b =>
                {
                    b.HasOne("AcademyApi.Models.tProfesionalSchool", "ProfesionalSchool")
                        .WithMany("Careers")
                        .HasForeignKey("IdProfesionalSchool")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfesionalSchool");
                });

            modelBuilder.Entity("AcademyApi.Models.tCourse", b =>
                {
                    b.HasOne("AcademyApi.Models.tTeacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("IdTeacher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyApi.Models.tCareer", null)
                        .WithMany("Courses")
                        .HasForeignKey("tCareerIdCareer");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("AcademyApi.Models.tExamn", b =>
                {
                    b.HasOne("AcademyApi.Models.tCourse", "Courses")
                        .WithMany("Examns")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("AcademyApi.Models.tQuestions", b =>
                {
                    b.HasOne("AcademyApi.Models.tExamn", "Examn")
                        .WithMany("Questions")
                        .HasForeignKey("IdExam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examn");
                });

            modelBuilder.Entity("AcademyApi.Models.tStudent", b =>
                {
                    b.HasOne("AcademyApi.Models.tCourse", "course")
                        .WithMany("Students")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");
                });

            modelBuilder.Entity("tAnswerStudenttQuestions", b =>
                {
                    b.HasOne("AcademyApi.Models.tAnswerStudent", null)
                        .WithMany()
                        .HasForeignKey("AnswerStudentsIdAnswerStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyApi.Models.tQuestions", null)
                        .WithMany()
                        .HasForeignKey("QuestionsIdQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcademyApi.Models.tCareer", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("AcademyApi.Models.tCourse", b =>
                {
                    b.Navigation("Examns");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("AcademyApi.Models.tExamn", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("AcademyApi.Models.tProfesionalSchool", b =>
                {
                    b.Navigation("Careers");
                });

            modelBuilder.Entity("AcademyApi.Models.tQuestions", b =>
                {
                    b.Navigation("Alternatives");
                });

            modelBuilder.Entity("AcademyApi.Models.tTeacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
